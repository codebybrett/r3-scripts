
[started 29-Aug-2015/13:08:38.661+10:00 [r-source/process]]
[finished 0:00:00.003 [r-source/process]]
[started 29-Aug-2015/13:08:38.665+10:00 [c-source/process]]
[started 29-Aug-2015/13:08:38.666+10:00 [parsing]]
[not-parsed %a-constants.c]
[not-parsed %a-stubs.c]
[not-parsed %f-int.c]
[finished 0:00:00.201 [parsing]]
[started 29-Aug-2015/13:08:38.868+10:00 [indexing]]
[finished 0:00:00.314 [indexing]]
[finished 0:00:00.518 [c-source/process]]
[words-missing-specs [-add-add action in-context native]]
[words-missing-rebnatives [++ access-os call]]
[line-width-exceeded "%a-lib.c" "RL_Start" {REBYTE *bin, REBINT len, REBYTE *script, REBINT script_len, REBCNT flags}]
[line-width-exceeded "%a-lib.c" "RL_Do_Binary" {const REBYTE *bin, REBINT length, REBCNT flags, REBCNT key, RXIARG *result}]
[line-width-exceeded "%a-lib.c" "RL_Find_Word" "u32 *words, u32 word"]
[line-width-exceeded "%a-lib.c" "RL_Set_Field" "REBSER *obj, u32 word, RXIARG val, int type"]
[line-width-exceeded "%a-lib.c" "RL_Length_As_UTF8" "const void *p, REBCNT len, REBOOL uni, REBOOL ccr"]
[line-width-exceeded "%a-lib.c" "RL_Encode_UTF8" {REBYTE *dst, REBINT max, const void *src, REBCNT *len, REBFLG uni, REBFLG ccr}]
[line-width-exceeded "%c-do.c" "Do_Args" {struct Reb_Call *call, const REBVAL path[], REBSER *block, REBCNT index}]
[line-width-exceeded "%c-do.c" "Do_Core" {REBVAL * const out, REBOOL next, REBSER *block, REBCNT index, REBFLG lookahead}]
[line-width-exceeded "%c-do.c" "Reduce_Only" {REBVAL *out, REBSER *block, REBCNT index, REBVAL *words, REBOOL into}]
[line-width-exceeded "%c-do.c" "Compose_Block" {REBVAL *out, REBVAL *block, REBFLG deep, REBFLG only, REBOOL into}]
[line-width-exceeded "%c-do.c" "Apply_Block" {REBVAL *out, const REBVAL *func, REBSER *block, REBCNT index, REBFLG reduce}]
[line-width-exceeded "%c-error.c" "Trap3" {REBCNT num, const REBVAL *arg1, const REBVAL *arg2, const REBVAL *arg3}]
[line-width-exceeded "%c-frame.c" "Collect_Frame_Inner_Loop" "REBINT *binds, REBVAL value[], REBCNT modes"]
[line-width-exceeded "%c-frame.c" "Collect_Words_Inner_Loop" "REBINT *binds, REBVAL value[], REBCNT modes"]
[line-width-exceeded "%c-frame.c" "Resolve_Context" {REBSER *target, REBSER *source, REBVAL *only_words, REBFLG all, REBFLG expand}]
[line-width-exceeded "%c-frame.c" "Bind_Values_Inner_Loop" {REBINT *binds, REBVAL value[], REBSER *frame, REBCNT mode}]
[line-width-exceeded "%c-frame.c" "Bind_Relative_Inner_Loop" "REBINT *binds, REBSER *frame, REBSER *block"]
[line-width-exceeded "%c-frame.c" "Rebind_Block" {REBSER *src_frame, REBSER *dst_frame, REBVAL *data, REBFLG modes}]
[line-width-exceeded "%c-word.c" "Val_Init_Word" {REBVAL *value, REBCNT type, REBINT sym, REBSER *frame, REBCNT index}]
[line-width-exceeded "%d-print.c" "Probe_Core_Debug" {const char *msg, const char *file, int line, const REBVAL *val}]
[line-width-exceeded "%f-blocks.c" "Clonify_Values_Len_Managed" {REBVAL value[], REBCNT len, REBOOL deep, REBU64 types}]
[line-width-exceeded "%f-extension.c" "REBNATIVE" "do_commands"]
[line-width-exceeded "%f-math.c" "Emit_Decimal" {REBYTE *cp, REBDEC d, REBFLG trim, REBYTE point, REBINT decimal_digits}]
[line-width-exceeded "%f-modify.c" "Modify_Array" {REBCNT action, REBSER *dst_ser, REBCNT dst_idx, const REBVAL *src_val, REBCNT flags, REBINT dst_len, REBINT dups}]
[line-width-exceeded "%f-modify.c" "Modify_String" {REBCNT action, REBSER *dst_ser, REBCNT dst_idx, const REBVAL *src_val, REBCNT flags, REBINT dst_len, REBINT dups}]
[line-width-exceeded "%f-series.c" "Do_Series_Action" {struct Reb_Call *call_, REBCNT action, REBVAL *value, REBVAL *arg}]
[line-width-exceeded "%f-stubs.c" "Val_Init_Series_Index_Core" {REBVAL *value, enum Reb_Kind type, REBSER *series, REBCNT index}]
[line-width-exceeded "%l-scan.c" "Scan_Error" {REBCNT errnum, SCAN_STATE *ss, REBCNT tkn, const REBYTE *arg, REBCNT size, REBVAL *relax}]
[line-width-exceeded "%l-scan.c" "Init_Scan_State" {SCAN_STATE *scan_state, const REBYTE *cp, REBCNT limit}]
[line-width-exceeded "%l-types.c" "Append_Markup" {REBSER *series, enum Reb_Kind type, const REBYTE *bp, REBINT len}]
[line-width-exceeded "%m-pools.c" "Series_Data_Alloc" {REBSER *series, REBCNT length, REBYTE wide, REBCNT flags}]
[line-width-exceeded "%m-series.c" "Insert_Series" {REBSER *series, REBCNT index, const REBYTE *data, REBCNT len}]
[line-width-exceeded "%m-series.c" "Append_Mem_Extra" {REBSER *series, const REBYTE *data, REBCNT len, REBCNT extra}]
[line-width-exceeded "%n-control.c" "REBNATIVE" "any"]
[line-width-exceeded "%n-control.c" "REBNATIVE" "case"]
[line-width-exceeded "%n-control.c" "REBNATIVE" "compose"]
[line-width-exceeded "%n-control.c" "REBNATIVE" "either"]
[line-width-exceeded "%n-control.c" "REBNATIVE" "exit"]
[line-width-exceeded "%n-control.c" "REBNATIVE" "trap"]
[line-width-exceeded "%n-data.c" "REBNATIVE" "asciiq"]
[line-width-exceeded "%n-data.c" "REBNATIVE" "latin1q"]
[line-width-exceeded "%n-data.c" "REBNATIVE" "collect_words"]
[line-width-exceeded "%n-data.c" "REBNATIVE" "resolve"]
[line-width-exceeded "%n-data.c" "REBNATIVE" "set"]
[line-width-exceeded "%n-data.c" "REBNATIVE" "infixq"]
[line-width-exceeded "%n-data.c" "REBNATIVE" "map_gob_offset"]
[line-width-exceeded "%n-io.c" "REBNATIVE" "request_file"]
[line-width-exceeded "%n-io.c" "REBNATIVE" "get_env"]
[line-width-exceeded "%n-io.c" "REBNATIVE" "set_env"]
[line-width-exceeded "%n-loop.c" "Loop_Series" {REBVAL *out, REBVAL *var, REBSER* body, REBVAL *start, REBINT ei, REBINT ii}]
[line-width-exceeded "%n-loop.c" "Loop_Integer" {REBVAL *out, REBVAL *var, REBSER* body, REBI64 start, REBI64 end, REBI64 incr}]
[line-width-exceeded "%n-loop.c" "Loop_Number" {REBVAL *out, REBVAL *var, REBSER* body, REBVAL *start, REBVAL *end, REBVAL *incr}]
[line-width-exceeded "%n-loop.c" "REBNATIVE" "remove_each"]
[line-width-exceeded "%n-loop.c" "REBNATIVE" "map_each"]
[line-width-exceeded "%n-math.c" "Arc_Trans" {REBVAL *out, const REBVAL *value, REBOOL degrees, REBCNT kind}]
[line-width-exceeded "%n-math.c" "REBNATIVE" "lesser_or_equalq"]
[line-width-exceeded "%n-math.c" "REBNATIVE" "greater_or_equalq"]
[line-width-exceeded "%n-strings.c" "REBNATIVE" "to_hex"]
[line-width-exceeded "%n-strings.c" "REBNATIVE" "find_script"]
[line-width-exceeded "%n-strings.c" "REBNATIVE" "invalid_utfq"]
[line-width-exceeded "%n-system.c" "REBNATIVE" "quit"]
[line-width-exceeded "%p-clipboard.c" "Clipboard_Actor" {struct Reb_Call *call_, REBSER *port, REBCNT action}]
[line-width-exceeded "%p-file.c" "Read_File_Port" {REBVAL *out, REBSER *port, REBREQ *file, REBVAL *path, REBCNT args, REBCNT len}]
[line-width-exceeded "%p-net.c" "Transport_Actor" {struct Reb_Call *call_, REBSER *port, REBCNT action, enum Transport_Types proto}]
[line-width-exceeded "%s-find.c" "Compare_Bytes" {const REBYTE *b1, const REBYTE *b2, REBCNT len, REBOOL uncase}]
[line-width-exceeded "%s-find.c" "Find_Byte_Str" {REBSER *series, REBCNT index, REBYTE *b2, REBCNT l2, REBFLG uncase, REBFLG match}]
[line-width-exceeded "%s-find.c" "Find_Str_Str" {REBSER *ser1, REBCNT head, REBCNT index, REBCNT tail, REBINT skip, REBSER *ser2, REBCNT index2, REBCNT len, REBCNT flags}]
[line-width-exceeded "%s-find.c" "Find_Str_Char" {REBSER *ser, REBCNT head, REBCNT index, REBCNT tail, REBINT skip, REBUNI c2, REBCNT flags}]
[line-width-exceeded "%s-find.c" "Find_Str_Bitset" {REBSER *ser, REBCNT head, REBCNT index, REBCNT tail, REBINT skip, REBSER *bset, REBCNT flags}]
[line-width-exceeded "%s-make.c" "Insert_String" {REBSER *dst, REBCNT idx, const REBSER *src, REBCNT pos, REBCNT len, REBFLG no_expand}]
[line-width-exceeded "%s-mold.c" "Mold_Block_Series" {REB_MOLD *mold, REBSER *series, REBCNT index, const char *sep}]
[line-width-exceeded "%s-ops.c" "Cloak" {REBOOL decode, REBYTE *cp, REBCNT dlen, REBYTE *kp, REBCNT klen, REBFLG as_is}]
[line-width-exceeded "%s-trim.c" "trim_head_tail" {REBSER *ser, REBCNT index, REBCNT tail, REBFLG h, REBFLG t}]
[line-width-exceeded "%s-trim.c" "Trim_String" {REBSER *ser, REBCNT index, REBCNT len, REBCNT flags, REBVAL *with}]
[line-width-exceeded "%s-unicode.c" "Encode_UTF8" {REBYTE *dst, REBINT max, const void *src, REBCNT *len, REBFLG uni, REBFLG ccr}]
[line-width-exceeded "%t-block.c" "Find_Block" {REBSER *series, REBCNT index, REBCNT end, const REBVAL *target, REBCNT len, REBCNT flags, REBINT skip}]
[line-width-exceeded "%t-block.c" "Sort_Block" {REBVAL *block, REBFLG ccase, REBVAL *skipv, REBVAL *compv, REBVAL *part, REBFLG all, REBFLG rev}]
[line-width-exceeded "%t-event.c" "Set_Event_Var" {REBVAL *value, const REBVAL *word, const REBVAL *val}]
[line-width-exceeded "%t-gob.c" "Insert_Gobs" {REBGOB *gob, const REBVAL *arg, REBCNT index, REBCNT len, REBFLG change}]
[line-width-exceeded "%t-image.c" "Fill_Rect" {REBCNT *ip, REBCNT color, REBCNT w, REBINT dupx, REBINT dupy, REBOOL only}]
[line-width-exceeded "%t-image.c" "Fill_Alpha_Rect" {REBCNT *ip, REBYTE alpha, REBINT w, REBINT dupx, REBINT dupy}]
[line-width-exceeded "%t-image.c" "Bin_To_RGBA" {REBYTE *rgba, REBCNT size, REBYTE *bin, REBINT len, REBOOL only}]
[line-width-exceeded "%t-image.c" "Copy_Rect_Data" {REBVAL *dst, REBINT dx, REBINT dy, REBINT w, REBINT h, REBVAL *src, REBINT sx, REBINT sy}]
[line-width-exceeded "%t-map.c" "Find_Key" {REBSER *series, REBSER *hser, REBVAL *key, REBINT wide, REBCNT cased, REBYTE mode}]
[line-width-exceeded "%t-string.c" "Sort_String" {REBVAL *string, REBFLG ccase, REBVAL *skipv, REBVAL *compv, REBVAL *part, REBFLG all, REBFLG rev}]
[line-width-exceeded "%t-struct.c" "Set_Struct_Var" {REBSTU *stu, REBVAL *word, REBVAL *elem, REBVAL *val}]
[line-width-exceeded "%u-gif.c" "Decode_LZW" {REBCNT *data, REBYTE **cpp, REBYTE *colortab, REBINT w, REBINT h, REBOOL interlaced}]
[line-width-exceeded "%u-parse.c" "Parse_Next_String" {REBPARSE *parse, REBCNT index, const REBVAL *item, REBCNT depth}]
[line-width-exceeded "%u-parse.c" "Parse_Next_Block" {REBPARSE *parse, REBCNT index, const REBVAL *item, REBCNT depth}]
[line-width-exceeded "%u-parse.c" "To_Thru" {REBPARSE *parse, REBCNT index, const REBVAL *block, REBFLG is_thru}]
[line-width-exceeded "%u-parse.c" "Parse_To" {REBPARSE *parse, REBCNT index, const REBVAL *item, REBFLG is_thru}]
[line-width-exceeded "%u-parse.c" "Parse_Rules_Loop" {REBPARSE *parse, REBCNT index, const REBVAL *rules, REBCNT depth}]
[stats [
        parsed: 98
        not-parsed: 3
        decl-updated: 847
        files-written: 87
    ]]